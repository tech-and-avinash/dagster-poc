version: "3.7"

services:
  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_etl_webserver:
    build:
      context: ./etl/dagster
      dockerfile: Dockerfile
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_etl_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - ./etl/.env
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./etl/dagster:/app/dagster  # Mount the dagster code
    networks:
      - dagster_etl_network
    depends_on:
      - docker_example_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_etl_daemon:
    build:
      context: ./etl/dagster
      dockerfile: Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_etl_daemon
    restart: on-failure
    env_file:
      - ./etl/.env
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_etl_network
    depends_on:
      - docker_example_user_code

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
      # webserver.
  docker_example_user_code:
    build:
      context: ./etl/repository
      dockerfile: Dockerfile
    container_name: docker_example_user_code
    image: docker_example_user_code_image
    restart: always
    env_file:
      - ./etl/.env
    networks:
      - dagster_etl_network
    volumes:  # Mount the code as a volume for hot-reloading
      - ./etl/repository:/app/repository
 
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./api/.env
    ports:
      - "5000:5000"
      - "5678:5678"  # VS Code debugger port
    networks:
      - dagster_etl_network
    volumes:  # Mount the code as a volume for hot-reloading
      - ./api:/app/api
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1  # Required to get all the debug logs in real time

networks:
  dagster_etl_network:
    driver: bridge
    name: dagster_etl_network
